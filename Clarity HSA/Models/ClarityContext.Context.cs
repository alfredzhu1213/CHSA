//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Clarity_HSA.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ClarityContextContainer : DbContext
    {
        public ClarityContextContainer()
            : base("name=ClarityContextContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Demographic> Demographics { get; set; }
        public virtual DbSet<Charge> Charges { get; set; }
        public virtual DbSet<Deposit> Deposits { get; set; }
        public virtual DbSet<DashboardConfig> DashboardConfigs { get; set; }
        public virtual DbSet<OrganizationSettings> OrganizationSettings { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<CustomReportSchedule> CustomReportSchedules { get; set; }
        public virtual DbSet<ReportField> ReportFields { get; set; }
        public virtual DbSet<Field> Fields { get; set; }
        public virtual DbSet<FeedLog> FeedLogs { get; set; }
        public virtual DbSet<RepaymentTable> RepaymentTables { get; set; }
        public virtual DbSet<Loan> Loans { get; set; }
        public virtual DbSet<AvailableEntity> AvailableEntities { get; set; }
        public virtual DbSet<AvailableEntityOption> AvailableEntityOptions { get; set; }
        public virtual DbSet<ReportEntity> ReportEntities { get; set; }
        public virtual DbSet<EntityOption> EntityOptions { get; set; }
        public virtual DbSet<ReportFieldChange> ReportFieldChanges { get; set; }
        public virtual DbSet<FeedLogDetail> FeedLogDetails { get; set; }
        public virtual DbSet<Report834Options> Report834Options { get; set; }
        public virtual DbSet<CronLog> CronLogs { get; set; }
        public virtual DbSet<Termination> Terminations { get; set; }
        public virtual DbSet<ReportScheduleDuration> ReportScheduleDurations { get; set; }
        public virtual DbSet<Charges_archiveClarity> Charges_archiveClarity { get; set; }
        public virtual DbSet<CustomReportSchedulesBU> CustomReportSchedulesBUs { get; set; }
        public virtual DbSet<ReportFieldsBU> ReportFieldsBUs { get; set; }
        public virtual DbSet<ReportFieldsHolding> ReportFieldsHoldings { get; set; }
        public virtual DbSet<extra_report_fields> extra_report_fields { get; set; }
        public virtual DbSet<HSA_error_log> HSA_error_log { get; set; }
    
        public virtual int DB_backup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DB_backup");
        }
    
        public virtual int defaultRepayment(Nullable<bool> debug)
        {
            var debugParameter = debug.HasValue ?
                new ObjectParameter("Debug", debug) :
                new ObjectParameter("Debug", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("defaultRepayment", debugParameter);
        }
    
        public virtual ObjectResult<string> getEmployeeRepayment(Nullable<int> empID, Nullable<int> organizationID, Nullable<bool> debug)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("organizationID", organizationID) :
                new ObjectParameter("organizationID", typeof(int));
    
            var debugParameter = debug.HasValue ?
                new ObjectParameter("Debug", debug) :
                new ObjectParameter("Debug", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getEmployeeRepayment", empIDParameter, organizationIDParameter, debugParameter);
        }
    }
}
